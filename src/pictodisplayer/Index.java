package pictodisplayer;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import pictodisplayer.db.Pictodb;

/**
 *
 * @author Pawel Kopec <paweelkopec@gmail.com>
 */
public class Index extends javax.swing.JFrame {

    protected static Pictodb db;

    /**
     * Creates new form Index
     */
    public Index() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception e) {
            System.out.println("UIManager Exception : " + e);
        }
        createTree();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        nowaKategoria = new javax.swing.JButton();
        containerPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuEnd = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuAutor = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Kategorie"));

        categoryTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode));
        categoryTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                categoryTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(categoryTree);

        nowaKategoria.setActionCommand("Nowa Kategoria");
        nowaKategoria.setLabel("Nowa Kategoria");
        nowaKategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nowaKategoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nowaKategoria, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(nowaKategoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE))
        );

        containerPanel.setLayout(new java.awt.CardLayout());

        menuFile.setText("Plik");

        menuEnd.setText("Zakończ");
        menuEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEndActionPerformed(evt);
            }
        });
        menuFile.add(menuEnd);

        jMenuBar1.add(menuFile);

        menuHelp.setText("Pomoc");

        menuAutor.setText("O Programie");
        menuAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAutorActionPerformed(evt);
            }
        });
        menuHelp.add(menuAutor);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Press nowaKategoria event
     *
     * @param evt
     */
    private void nowaKategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nowaKategoriaActionPerformed
        NewCategory nowaKategoria = new NewCategory();
        nowaKategoria.setDb(this.db);
        nowaKategoria.setIndex(this);
        nowaKategoria.setVisible(true);
    }//GEN-LAST:event_nowaKategoriaActionPerformed
    /**
     * Category tree pressed
     *
     * @param evt
     */
    private void categoryTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_categoryTreeValueChanged
        TreePath path = categoryTree.getSelectionPath();
        System.out.println("kategoria glowna ");
        try {
            PictoTreeNode selectedNode = (PictoTreeNode) path.getLastPathComponent();
        } catch (Exception e) {
            System.out.println("Error -" + e);
            return;
        }
        PictoTreeNode selectedNode = (PictoTreeNode) path.getLastPathComponent();
        Object userObject = selectedNode.getUserObject();
        selectedNode.getParent();
        if (path.toString().equals("[Kategorie]")) {
            System.out.println("kategoria glowna ");
        } else if (selectedNode.getParent().toString().equals("Kategorie")) {
            //category
            containerPanel.removeAll();
            System.out.println("KID "+ selectedNode.ID);
            CategoryPanel cP = new CategoryPanel(selectedNode.ID);
            cP.setIndex(this);
            containerPanel.add(cP);
            containerPanel.invalidate();
            containerPanel.repaint();
            CardLayout cl = (CardLayout) (containerPanel.getLayout());
            cl.next(containerPanel);
        } else if (!selectedNode.getParent().toString().equals("Kategorie")) {
            System.out.println("strona" + selectedNode.getUserObject());
            //page
            containerPanel.removeAll();
            System.out.println("PID "+ selectedNode.ID);
            PagePanel pP = new PagePanel(selectedNode.ID);
            pP.setIndex(this);
            containerPanel.add(pP);
            containerPanel.invalidate();
            containerPanel.repaint();
            CardLayout cl = (CardLayout) (containerPanel.getLayout());
            cl.next(containerPanel);
        }
    }//GEN-LAST:event_categoryTreeValueChanged
    /**
     * Press end event
     * @param evt 
     */
    private void menuEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEndActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuEndActionPerformed
    /**
     * Press menuAutor event
     * @param evt 
     */
    private void menuAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAutorActionPerformed
        JOptionPane.showMessageDialog(this, "Autor:  Paweł Kopeć\n Email: paweelkopec@gmail.com");
    }//GEN-LAST:event_menuAutorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree categoryTree;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem menuAutor;
    private javax.swing.JMenuItem menuEnd;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JButton nowaKategoria;
    // End of variables declaration//GEN-END:variables

    private static javax.swing.tree.DefaultMutableTreeNode treeNode;
    /**
     * Create categorys tree
     */
    public static void createTree() {
        treeNode = new javax.swing.tree.DefaultMutableTreeNode("Kategorie");
        try {
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            Connection conn = DriverManager.getConnection(Pictodb.getName());
            Statement st = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Statement st2 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rec = st.executeQuery("SELECT * FROM categories ORDER BY sort, name ASC");
            int rows = 0;
            if (rec.last()) {
                rows = rec.getRow();
                rec.beforeFirst();
            }
            ResultSet rec2 = st2.executeQuery("SELECT * FROM pages ORDER BY  name ASC");
            int rows2 = 0;
            if (rec2.last()) {
                rows2 = rec2.getRow();
                rec2.beforeFirst();
            }
            PictoTreeNode[] nodes = new PictoTreeNode[rows];
            PictoTreeNode[] pages = new PictoTreeNode[rows2];
            Integer i = 0;
            Integer j = 0;
            while (rec.next()) {
                nodes[i] = new PictoTreeNode(rec.getString("name"));
                nodes[i].setID(rec.getInt("id"));
                ResultSet rec3 = st2.executeQuery("SELECT * FROM pages WHERE cid=" + rec.getInt("id") + " ORDER BY sort, name ASC");
                while (rec3.next()) {
                    pages[j] = new PictoTreeNode(rec3.getString("name"));
                    pages[j].setID(rec3.getInt("id"));
                    nodes[i].add(pages[j]);
                    j++;
                }
                treeNode.add(nodes[i]);
                i++;
            }
            st.close();
        } catch (Exception e) {
            System.out.println("Error - " + e.toString());
        }
    }

    /**
     * Refresh tree
     */
    public void reLoadTree() {
        createTree();
        categoryTree.removeAll();
        categoryTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode));
        categoryTree.addTreeSelectionListener(null);
    }
}
